#! /usr/bin/bash

# -e : Exit on any command failure (DISABLED)
# -u : Treat undeclared variables as an error
# -f : Disable filename expansion
# -o pipefail : Produce a failure if any command in a pipe-line fails.
set -uf -o pipefail


verbose=false
compile_submission=false
file_view=false
get_info=false
edit_info=false
overwrite=false
usage=false
student=

function main {
    # === Argument Handling ===
    if [[ $# -eq 0 ]]; then
        echo "$0: A single input file is required."
        exit 1
    fi

    local OPTIND flag
    while getopts 's:cfievwh' flag; do
      case "${flag}" in
        s) student="${OPTARG}" ;;
        c) compile_submission=true ;;
        f) file_view=true ;;
        i) get_info=true ;;
        e) edit_info=true ;;
        v) verbose=true ;;
        w) overwrite=true ;;
        h) usage=true;;
        *) echo "$0: Unexpected option ${flag}"; usage ; exit 2 ;;
      esac
    done

    shift $((OPTIND-1))

    if [[ "$usage" == true ]]; then
        usage
        exit 0
    fi

    # === Primary Logic ===
    for path in "$@"; do
        echo "Processing $path."
        local gradebook=$(extract_and_sanitize $path)
        process_gradebook "$gradebook"
    done
}

function usage {
        echo -e "examine_assignments [OPTIONS...] {GRADEBOOK} ...\n"
        echo -e "Unpackage gradebooks and examine the submissions contained within.\n"
        echo -e "-s STUDENT\tExamine a particular student's submission."
        echo -e "-c\t\tAttempt to compile student submissions."
        echo -e "-f\t\tView the source code of the student's submission."
        echo -e "-i\t\tView the information file included with each student submission."
        echo -e "-e\t\tEdit the included information file after reviewing the submission so comments may be added and a grade assigned."
        echo -e "-v\t\tVerbose output for debugging."
        echo -e "-h\t\tDisplay this help menu."
}

function extract_and_sanitize {
    if [[ $# -eq 0 ]]; then
        echo "$0: A single input file is required."
        return
    fi

    # Extract gradebook, clean up filenames, enter that gradebook.
    local extracted_archive=$(basename "$1" .zip)
    if [[ "$overwrite" != true && -d "$extracted_archive" ]]; then
        :
    else
        dtrx -ro "$1"
    fi
    #detox "$extracted_archive"
    echo "$extracted_archive"
}

function process_gradebook {
    if [ "$verbose" = true ]; then
        echo "[DEBUG] Entering directory: $1"
    fi
    pushd "$1" > /dev/null

    #local submissions=$(find "." -name "*.txt")
    #local sources=$(find . -type d -name "*attempt*")
    #for submission in "$submissions"; do
    find "." -name "*.txt" | while read submission
    do
        if [[ ! ( -z "$student" || "$submission" =~ "$student" ) ]]; then
            continue
        fi

        process_submission "${submission}"
    done

    #find . -name "*.java" | while read submission; do
        #if [[ ! ( -z "$student" || $submission =~ "$student" ) ]]; then
            #continue
        #fi

        #echo $submission
        #highlight -O ansi --force $submission | less -R
        ##pause

        #if grep -q "public static void main" "$submission"; then
            #compile "$submission"
            #pause
        #fi
    #done

    if [ "$verbose" = true ]; then
        echo "[DEBUG] Exiting directory: $1"
    fi
    popd > /dev/null
}

function process_submission {
    if [ "$verbose" = true ]; then
        echo "[DEBUG] Asked to process file $1"
    fi
    local source=$(grep -oE "Filename: .*" "$1" | cut -d" " -f1 --complement | cut -d. -f1)
    if [ "$verbose" = true ]; then
        echo "[DEBUG] Found source = $source"
        pause
    fi

    if [ "$get_info" = true ]; then
        less -R "$1"
    fi

    if [ "$verbose" = true ]; then
        echo "[DEBUG] Entering directory: $source"
    fi
    pushd "$source" > /dev/null

    local codes=$(find "." -name "*.java" -print)

    
    if [ "$file_view" = true ]; then
        for file in $codes; do
            #$EDITOR "$file"
            #pause
            #less "$file"
            highlight -O ansi --force "$file" | less -R
        done
    fi

    local texts=$(find "." -name "*.txt" -print)
    local mains=$(grep -lr "public static void main" ".")
    if [ "$verbose" = true ]; then
        echo -e "[DEBUG] Found code files:\n$codes"
        echo -e "[DEBUG] Found text files:\n$texts"
        echo -e "[DEBUG] Found main method:\n$mains"
        pause
    fi

    if [ "$compile_submission" = true ]; then
        for main in "$mains"; do
            compile "$main"
        done
    fi

    if [ "$verbose" = true ]; then
        echo "[DEBUG] Exiting directory: $source"
    fi
    popd > /dev/null
    if [ "$edit_info" = true ]; then
        $EDITOR "$1"
    fi
}

function compile {
        echo -e "\nCompiling $1...\n"
        filedirectory=$(dirname "$1")

        # Compile all .java files in the directory of the submission.
        javac $(find "${filedirectory}" -name "*.java" -printf "%p ")

        #package_name=$(basename $(dirname "$1")) # Look at the directory of the file for its package information.
        package_name=$(grep -oE "^package .*;" "$1" | sed 's/.* \(.*\).$/\1/') # Look in the file for its package information.
        #rg ".*package .*;" "$java_files"
        { # Try
            if [ -z "$package_name" ]; then
                java -classpath "$filedirectory" $(basename "$1" .java)
            else
                java -classpath "$(dirname "$filedirectory")" "$package_name.$(basename "$1" .java)"
            fi
        } || { # Catch
            echo "There was some form of compilation error with the file: $(dirname "$1")"
        }
}

function pause {
        echo ""
        read -p "Press Enter to continue" </dev/tty
}

function get_date {
    # 2018-02-10-23-27-44
    :
}

map() {
    local command i rep
    if [ $# -lt 2 ] || [[ ! "$@" =~ :[[:space:]] ]];then
        echo "Invalid syntax." >&2; return 1
    fi
    until [[ $1 =~ : ]]; do
        command="$command $1"; shift
    done
    command="$command ${1%:}"; shift
    for i in "$@"; do
        if [[ $command =~ \{\} ]];then
            rep="${command//\{\}/\"$i\"}"
            eval "${rep//\\/\\\\}"
        else
            eval "${command//\\/\\\\} \"${i//\\/\\\\}\""
        fi
    done
}


main "$@"
